@inject ILoxicaApi loxicaAPI
@inject AuthenticationStateProvider authStateProvider
@inject ILocalStorageService _localStorage

<!--Envolvemos todo o contido orixinal de App.razor nun componente CascadingAuthenticatioState
que pasa unha property en cascada como authentication state property
asi que os componentes Blazor poden ler esa propiedade e poden entender
se un usuario esta ou non autenticado
-->
<!--We wrap all the original content of App.razon within a CascadingAuthenticatioState
component which passes a cascading property like authentication state
so Blazor componentes can read that property and can understand
whether a user is authenticated or not-->
<CascadingAuthenticationState>
    <!--Con OnNavigationAsync o metodo executarase en CADA reload da web-->
    <Router AppAssembly="@typeof(App).Assembly" OnNavigateAsync="@OnNavigateAsync">
        <Found Context="routeData">
            <!--Cambiamos RouteView por defecto agregando AuthorizeRouteView (feito esto hai que quitar RouteView para evitar unha excepcion)-->
            <!--We modify RouteView by default adding AuthorizeRouteView (you must remove RouteView component afterwards to prevent any exception)-->
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>
<!--Fin CascadingAuthenticationState-->
@code
{
    private async Task OnNavigateAsync(NavigationContext context)
    {
        //usamos a key que lle demos en Login.razor, "isautenticado"
        //we use the key we added in Login.razor, "isautenticado"
        var auth = await _localStorage.GetItemAsStringAsync("isautenticado");

        //para usuario autenticado con facebook, cuio control non temos en localstorage
        //for an user authenticated with facebook, something we dont control in localstorage
        //usamos a query parameter de return Redirect the authcontroller
        //we use the query parameter from return Redirect de authcontroller
        if (string.IsNullOrEmpty(auth) && context.Path.ToLower().Contains("externalauth=true"))
        {
            auth = "true";
            await _localStorage.SetItemAsStringAsync("isautenticado", "true");
        }

        //obtemos informacion de usuario convertindo authStateProvider
        //ao noso PersonalAuthStateProvider
        //we get user information converting authStateProvider
        //to our PersonalAuthStateProvider
        var usuario = (await (authStateProvider as PersonalAuthStateProvider).GetAuthenticationStateAsync()).User;

        //agora ao acceder a login de usuario con "Success" exitosamente
        // estaran disponhibles
        // a api de perfil de usuario facendo unha call
        //e o localstorage coa variable "isautenticado"
        //now when accessing the user login with "Success"
        //both the api from the user profile performing a call
        //and the localstorage containing the variable "isautenticado", will be available
        //the user can access his/her account
        if (!string.IsNullOrEmpty(auth) && !usuario.Identity.IsAuthenticated)
        {
            var resposta = await loxicaAPI.UsuarioPerfilAsync();

            if (resposta.Mensaxe == "Success")
            {
                //como non podemos inxectar PersonalAuthStateProvider tal cal
                //usamos authStateProvider, que si e unha instancia de AuthenticationStateProvider
                // que si podemos inxectar
                //convertirmos authStateProvider en PersonalAuthStateProvider
                (authStateProvider as PersonalAuthStateProvider)
                .SetAuthenticationInfo(resposta.UsuarioPerfil);
            }
            else
            {
                //en caso contrario, eliminamos a variable "isautenticado"
                //para evitar chamadas a API non desexada
                //otherwise, we remove the variable "isautenticado"
                //to prevent unwanted API calls
                await _localStorage.RemoveItemAsync("isautenticado");
            }
        }
    }
}
